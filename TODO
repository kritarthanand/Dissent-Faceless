Anonymity
- Design a dynamic group -- handles new connections, disconnections, and blame
- Need some structure to communicate group status / change
- Make sessions optionally multithreaded, we really don't want crypto computation in the main thread
- Need some means to initiate a group / session
- (Memory) Provide mechanisms to clear out intermediate state from Rounds
- (Memory) Move logic for individual states into separate classes

Connections
- ConnectionTable should be a value type
- Connections should be stored via QSharedPointer
- ConnectionManager and maybe EL should turn reject requests for connections when closed
- Relay assumes that Rpc always completes successfully ... needs timeout

Crypto
- Add QCA or Botan CryptoLibraries, take a look at the src/Crypto/CryptoFactory and other related files to get a general feel
- Integer should be a pimpl with a QSharedPointer or QScopedPointer
- DH ZKP shouldn't have a serialized message type, should just return the various components independently and the lower level app should do the serialization
- Remove Null implementations of non-slow things (DH is a good candidate)
- Move XOR and MessageRandomizer into Utils
- Remove Trusted and replace with Tolerant
- Use abstract types in API for more comprehensive type-checking (DhPublicKey instead of QByteArray)

Messaging
- Rpc messages are not deterministic, ignored outgoing Requests are never removed from the local _requests stack ... do we push more work on the user (calling code) or into the Rpc...
- Outstanding Rpc requests with pointers to senders can have stale pointers

Overall
- !!!Replace all pointers with qscoped / qshared pointers
- Consider removing qsharedata and replacing it with qsharedpointers

Overlay
- Implement Chord and use for overlay broadcasting and overall group dynamics
- Implement an actual gossip overlay with support for a gossip based broadcast medium

Transports
- Implement a UdpEL and create a reliability layer so we can use it for UdpEL and if we do other tasks that require reliable transmission (such as overlay routing).
- TcpEL (maybe Qt) cannot handle running out of file descriptors -- causing the application to infinite loop on poll.

Issues
- The current protocol doesn't work properly if a non-shuffler receives an invalid go / no go message ... since no one is waiting for its private keys, thus the process will conclude potentially without his follow up.
- Consider application aware and network layer broadcasting, evaluate performance as well as security / anonymity risks
- Tests RoundTest Null and DisconnectEnd do not work for protocols that have "infinite" internal phases (i.e., subrounds)

Web Server
- Better error handling 
- Index page with list of all URLs
- HTTPS
- Packaging formats

Tunnel
- Better fairness/queuing strategy. Tunnels should only read as much data from sockets as it can send to the next session. This will allow TCP to throttle the connection and not overwhelm the RemoteTunnel's buffers. Tunnels should send data packets to the next session in random order from every connection -- that way one connection doesn't dominate the channel.
- Session ID in network messages
- Have RemoteTunnel sign messages it sends back to LocalTunnel
- Encryption on packets in both directions
- Have every server function as a well-known remote tunnel
- FinishPacket should have a "reason" field
- Options for SOCKS 4[a] protocols


