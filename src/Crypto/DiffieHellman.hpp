#ifndef DISSENT_CRYPTO_DIFFIE_HELLMAN_KEY_H_GUARD
#define DISSENT_CRYPTO_DIFFIE_HELLMAN_KEY_H_GUARD

#include <QDebug>
#include <QByteArray>
#include <QString>

namespace Dissent {
namespace Crypto {
  /**
   * Stores a Diffie-Hellman exchange -- shared secret exchanged in plaintext
   */
  class DiffieHellman {
    public:
      static QByteArray GetP()
      {
        if(_p.isEmpty()) {
          Init();
        }
        return _p;
      }

      static QByteArray GetG()
      {
        if(_g.isEmpty()) {
          Init();
        }
        return _g;
      }

      static QByteArray GetQ()
      {
        if(_q.isEmpty()) {
          Init();
        }
        return _q;
      }

      /**
       * Destructor
       */
      virtual ~DiffieHellman() {}

      /**
       * Retrieves the public component of the Diffie-Hellman agreement
       */
      virtual QByteArray GetPublicComponent() const = 0;

      /**
       * Retrieves the private component of the Diffie-Hellman agreement
       */
      virtual QByteArray GetPrivateComponent() const = 0;

      /**
       * Return the shared secret given the other sides public component
       * @param remote_pub the other sides public component
       */
      virtual QByteArray GetSharedSecret(const QByteArray &remote_pub) const = 0;

      /**
       * Return a non-interactive zero-knowledge proof of a shared Diffie-Hellman
       * secret.
       * A wants to prove to C that the shared secret between A and B was correctly
       * generated by A. A then calls this method as:
       * 
       *    private_key_A->ProveSharedSecret(public_key_B)
       *
       * and sends the output to C
       */
      virtual QByteArray ProveSharedSecret(const QByteArray &remote_pub) const = 0;

      /**
       * Verify a non-interactive zero-knowledge proof of a shared Diffie-Hellman secret.
       * A wants to prove to C that the shared secret between A and B was correctly
       * generated by A. The verifier C then calls this method as:
       * 
       *    public_key_A->VerifySharedSecret(public_key_B)
       *
       * @returns QByteArray() if verification fails, otherwise returns the shared secret
       */
      virtual QByteArray VerifySharedSecret(const QByteArray &prover_pub,
          const QByteArray &remote_pub, const QByteArray &proof) const = 0;

    private:
      static void Init();
      static QByteArray _p, _g, _q;
  };
}
}

#endif
